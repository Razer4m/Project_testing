/*Strings*/
char *_strpbrk(char *s, const char *accept);
char *_strchr(const char *s, char c);
char *_strtok(char *str, const char *delimiters);
char *_strcat(char *dest, char *src);
int _strlen(char *str);
char *_strcpy(char *dest, char *src);
int _strcmp(char *s1, char *s2);
char *_strdup(const char *str);

/**
 * _strdup - Returns a pointer to a newly allocated space in memory,
 *           which contains a copy of the string given as a parameter.
 * @str: The string to duplicate.
 * Return: Pointer to the duplicated string, or NULL if it fails.
 */
char *_strdup(const char *str)
{
	char *dup;
	unsigned int len = 0;
	unsigned int i;

	if (str == NULL)
	{
		return (NULL);
	}
	while (str[len] != '\0')
	{
		len++;
	}
	dup = malloc((len + 1) * sizeof(char));

	if (dup == NULL)
	{
		return (NULL);
	}

	for (i = 0; i <= len; i++)
	{
		dup[i] = str[i];
	}
	return (dup);
}


/**
 * execute_command - Execute a command using fork and execlp.
 *
 * @input: The command to execute.
 * @argv0: The name of the calling program for error reporting.
 */
void execute_command(char *input, char *argv0)
{
	char *trimmed_input = input + strspn(input, " "), *cmd;
	int input_length = _strlen(trimmed_input);
	pid_t pid = fork();

	if (input_length == 0)
	{
		return;
	}
	if (pid == -1)
	{
		perror(argv0);
		exit(EXIT_FAILURE);
	}
	else if (pid == 0)
	{
		char *args[MAX_INPUT_LENGTH], *token = strtok(trimmed_input, " ");
		int arg_count = 0;

		while (token != NULL)
		{
			args[arg_count++] = token;
			token = strtok(NULL, " ");
		}
		args[arg_count] = NULL;
		cmd = get_path(args[0]);
		if (cmd == NULL)
		{
			perror(argv0);
			return;
		}
		if (execve(cmd, args, environ) == -1)
		{
			perror(argv0);
			exit(EXIT_FAILURE);
		}
		free(cmd);
	}
	else
	{
		wait(NULL);
	}
}